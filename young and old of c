#include<stdio.h>
#include<stdlib.h>
struct info{
    char name[10];
    int y,m,d;
};

int istrue(int y,int m,int d) { // 判断生日是否有效
    if(y>1819&&y<2019)
        return 1;
    else if(y==1819&&m==12&&d>=17)
        return 1;
    else if(y==2019){
        if(0<m && m<12)
            return 1;
        else if(m==12&&0<d&&d<18)
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

char *youngest(struct info**p,int n){
	int agey=1819,agem=1,aged=1;
	struct info*samey[105],*samem[105]; //存放年份最小的相同值 
	for(int l=0;l<105;l++){
		samey[l]=NULL;
		samem[l]=NULL;
	}
	for(int i=0;i<n;i++){//寻找最大年份 
		if(agey<(*(p+i))->y){
			agey=(*(p+i))->y;					
		}
	}
	int j=0;//j统计最大年份相同的人数 
	for(int i=0;i<n;i++){
		if(agey==(*(p+i))->y){		
			samey[j]=*(p+i);			
			j++;
			//printf("%s",samey[j-1]->name); //调试
			}
	}
	if(j==1){//只有一个最小年份时
		//printf("%s",samey[j-1]->name); //调试
		return samey[0]->name;
	}
	
	else{
		 
		for(int i=0;i<j;i++){//寻找最大月份 
			if(agem<samey[i]->m){
				agem=samey[i]->m;
			}
		}
		int mj=0;//mj统计月份相同的人数 
		for(int i=0;i<j;i++){
			if(agem==samey[i]->m){		
				samem[mj]=samey[i];
				mj++;
			}			
		}
		if(mj==1){//只有一个最小月份时 
			return samem[0]->name;
		}
		else{		
			int q=0;//计数以在前面的条件下寻找唯一的最小天 
			for(int i=0;i<mj;i++) {
				if(aged<=samem[i]->d){
					aged=samem[i]->d;
					q=i; 			 
				}			
			}
			//printf("%s",samem[q]->name) ;//调试 
			return samem[q]->name;	
			}
	}	
}
char *agemax(struct info**p,int n) {//寻找年龄最大的人 
	//printf("进入 agemax 函数，n = %d\n", n);//调试信息 
	//printf("%s",(*p)->name);//调试 
	//printf("%d",(*(p+1))->y);//调试 ，注意输出类型和相应的占位符 
	int agey=2019,agem=12,aged=31;
	struct info*samey[105],*samem[105]; //存放年份最小的相同值 
	for(int l=0;l<105;l++){
		samey[l]=NULL;
		samem[l]=NULL;
	}
	
	for(int i=0;i<n;i++){//寻找最小年份 
		if(agey>(*(p+i))->y){
			agey=(*(p+i))->y;
					
		}
	}	
	//printf("%d",agey);//调试	
	int j=0;//j统计最小年份相同的人数 
	//int agey1=agey;
	for(int i=0;i<n;i++){
		if(agey==(*(p+i))->y){		
			samey[j]=*(p+i);			
			j++;
			//printf("%s",samey[j-1]->name); //调试
			}
	}	
	if(j==1){//只有一个最小年份时
		//printf("%s",samey[j-1]->name); //调试
		return samey[0]->name;
	}
	
	else{
		 
		for(int i=0;i<j;i++){//寻找最小月份 
			if(agem>samey[i]->m){
				agem=samey[i]->m;
			}
		}
		int mj=0;//mj统计月份相同的人数 
		for(int i=0;i<j;i++){
			if(agem==samey[i]->m){		
				samem[mj]=samey[i];
				mj++;
			}			
		}
		if(mj==1){//只有一个最小月份时 
			return samem[0]->name;
		}
		else{		
			int q=0;//计数以在前面的条件下寻找唯一的最小天 
			for(int i=0;i<mj;i++) {
				if(aged>=samem[i]->d){
					aged=samem[i]->d;
					q=i; 			 
				}			
			}
			//printf("%s",samem[q]->name) ;//调试 
			return samem[q]->name;	
			}
	}
}

int main(){
    int n,j=0,i=0,sum=0;
    struct info *people[105],*p[105];
    for (int k = 0; k < 105; k++) {
        people[k] = NULL;
        p[k] = NULL;
    }
    if (scanf("%d", &n)!= 1) {
        printf("输入错误！\n");
        return 0;
    }
    for(int s=0;s<n;s++){ // s是局部变量
    	people[s]=(struct info*)malloc(sizeof(struct info));
    	if (people[s] == NULL) {
        	printf("内存分配失败！\n");
            return 0;
        }
        //p[i]=(struct info*)malloc(sizeof(struct info));
        /*if (p[i] == NULL) {
            printf("内存分配失败！\n");
            return 0;
        }*/
        scanf("%s %d/%d/%d",people[s]->name,&people[s]->y,&people[s]->m,&people[s]->d);
        int a=istrue(people[s]->y,people[s]->m,people[s]->d); 
        // a是局部变量
        
		if (a){        	
            p[i]=people[s];//p[i]统计合理的数据 
            i++;
        }       
        sum+=a;
    }
    printf("%d ",sum);
    //printf("%s ",(*p)->name);//调试 
    char*oldest=agemax(p,i);//
    char*young=youngest(p,i);
    printf("%s %s",oldest,young);
    /*for(int q=0;q<i;q++){
        printf("%s ",p[q]->name);
    }*/
    for (int k = 0; k < n; k++) {
        if (people[k]!= NULL) {
            free(people[k]);
        }      
    }
    for (int k = 0; k < 105; k++) {
        people[k] = NULL;
        p[k] = NULL;
    }
    return 0;
    }
    


